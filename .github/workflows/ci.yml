name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  COVERAGE_THRESHOLD: 80
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=${{ runner.os }}-build-${{ hashFiles('**/*.csproj', '**/*.sln') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache build output
      uses: actions/cache@v4
      with:
        path: |
          **/bin
          **/obj
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-build-${{ hashFiles('**/*.csproj', '**/*.sln') }}-

    - name: Restore dependencies
      run: dotnet restore UserApi.sln

    - name: Build solution
      run: dotnet build UserApi.sln --no-restore --configuration Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/Release
          **/obj/Release
          UserApi.sln
          **/*.csproj
          **/*.props
          **/*.targets
          Directory.Build.props
          global.json
        retention-days: 1

  code-quality:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore UserApi.sln

    - name: Run code formatting check
      run: dotnet format UserApi.sln --verify-no-changes --verbosity diagnostic

    - name: Run linting
      run: dotnet build UserApi.sln --verbosity normal --configuration Release /p:TreatWarningsAsErrors=true

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore UserApi.sln

    - name: Run tests
      run: dotnet test UserApi.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"coverage/**/coverage.cobertura.xml" -targetdir:"coverage/report" -reporttypes:"Html;Cobertura;OpenCover"
        # Copy the generated Cobertura file to the expected location
        cp coverage/report/Cobertura.xml coverage/coverage.cobertura.xml

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage/
        retention-days: 30

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7
      with:
        file: ./coverage/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
      continue-on-error: true

    - name: Check coverage threshold
      run: |
        if [ -f "coverage/report/OpenCover.xml" ]; then
          dotnet tool install -g dotnet-coverage
          dotnet coverage report coverage/report/OpenCover.xml --threshold ${{ env.COVERAGE_THRESHOLD }}
        else
          echo "OpenCover report not found, skipping threshold check"
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore UserApi.sln

    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet list package --deprecated

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports

    - name: Install SonarCloud scanner
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore UserApi.sln

    - name: Begin SonarCloud analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          dotnet sonarscanner begin \
            /k:"devops-thiago_otel-core-example" \
            /o:"devops-thiago" \
            /n:"UserApi" \
            /v:"1.0.0" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.pullrequest.key="${{ github.event.number }}" \
            /d:sonar.pullrequest.branch="${{ github.head_ref }}" \
            /d:sonar.pullrequest.base="${{ github.base_ref }}" \
            /d:sonar.cs.opencover.reportsPaths="coverage/report/OpenCover.xml" \
            /d:sonar.cs.cobertura.reportsPaths="coverage/coverage.cobertura.xml" \
            /d:sonar.coverage.exclusions="**/Program.cs,**/Migrations/**,**/bin/**,**/obj/**,**/*Tests*/**" \
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/Migrations/**"
        else
          dotnet sonarscanner begin \
            /k:"devops-thiago_otel-core-example" \
            /o:"devops-thiago" \
            /n:"UserApi" \
            /v:"1.0.0" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.branch.name="${{ github.ref_name }}" \
            /d:sonar.cs.opencover.reportsPaths="coverage/report/OpenCover.xml" \
            /d:sonar.cs.cobertura.reportsPaths="coverage/coverage.cobertura.xml" \
            /d:sonar.coverage.exclusions="**/Program.cs,**/Migrations/**,**/bin/**,**/obj/**,**/*Tests*/**" \
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/Migrations/**"
        fi

    - name: Build solution for SonarQube analysis
      run: dotnet build UserApi.sln --no-restore --configuration Release

    - name: List available coverage files
      run: |
        echo "=== Available coverage files ==="
        find . -name "*.xml" -type f | grep -i coverage | head -10
        echo "=== End coverage files ==="

    - name: Prepare coverage for SonarCloud
      run: |
        echo "=== Verifying coverage files for SonarCloud ==="

        # Check if coverage files exist
        if [ -f "coverage/coverage.cobertura.xml" ]; then
          echo "✓ Found Cobertura coverage file: coverage/coverage.cobertura.xml"
        else
          echo "✗ Cobertura coverage file not found at expected location"
          echo "Searching for coverage files..."
          find . -name "*.cobertura.xml" -type f 2>/dev/null || echo "No Cobertura files found"
        fi

        if [ -f "coverage/report/OpenCover.xml" ]; then
          echo "✓ Found OpenCover coverage file: coverage/report/OpenCover.xml"
        else
          echo "✗ OpenCover coverage file not found at expected location"
          echo "Searching for OpenCover files..."
          find . -name "OpenCover.xml" -type f 2>/dev/null || echo "No OpenCover files found"
        fi

        echo "=== All available coverage-related files ==="
        find . -name "*.xml" -type f | grep -i coverage | head -10 || echo "No coverage XML files found"

    - name: End SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  docker-build:
    runs-on: ubuntu-latest
    needs: [build, test, code-quality]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/userapi:latest
          ${{ secrets.DOCKER_USERNAME }}/userapi:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/otel-crud-api-net-core:v${{ github.run_number }}
        labels: |
          org.opencontainers.image.title=OpenTelemetry .NET Core CRUD API
          org.opencontainers.image.description=.NET Core REST API with OpenTelemetry integration and Alloy observability
          org.opencontainers.image.url=https://github.com/devops-thiago/otel-core-example
          org.opencontainers.image.source=https://github.com/devops-thiago/otel-core-example
          org.opencontainers.image.version=v${{ github.run_number }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=MIT
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment steps here
